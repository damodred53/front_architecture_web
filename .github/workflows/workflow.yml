name: workflow.yml

on:
  push:
    branches:
      - main
      - Ajout-ci-cd
  pull_request:
    branches:
      - main
      - Ajout-ci-cd

permissions:
  contents: write

env:
  VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

jobs:
  setup:
    name: Setup & Cache
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.node.outputs.node-version }}
    steps:
      - uses: actions/checkout@v4
      - id: node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci

  lint:
    name: Lint (ESLint)
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run lint

  typecheck:
    name: Type Check (tsc)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: |
          # Type-check sans émettre
          npx tsc --noEmit

  test:
    name: Unit Tests (Vitest)
    runs-on: ubuntu-latest
    needs: [setup, lint, typecheck]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - name: Run Vitest
        run: npm run test -- --run --coverage
      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            coverage
            coverage/**/*
          if-no-files-found: ignore

  audit:
    name: Vulnerability Scan (npm audit)
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - name: npm audit (fail on high)
        run: |
          # Échoue si vulnérabilité >= high
          npm audit --audit-level=high --omit=dev

  build:
    runs-on: ubuntu-latest
    needs: [test, audit]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}

      - name: Pack build as zip
        run: |
          mkdir -p artifacts
          zip -r artifacts/web-dist.zip dist

      # uploader le zip en tant qu'artifact
      - uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: artifacts/web-dist.zip
          if-no-files-found: error

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' # On ne veut pas de release sur PR
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: web-dist
          path: .

      - name: Delete previous release (if exists)
        run: |
          gh release delete latest -y || true
          git tag -d latest || true
          git push origin :refs/tags/latest || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: "Latest Build"
          body: "Build automatique depuis ${{ github.ref }} @ ${{ github.sha }}"
          files: web-dist.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker_image:
    name: Build & Push Docker image (Docker Hub)
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Debug paths
        run: |
          pwd
          ls -la
          echo "----"
          git rev-parse --show-toplevel || true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Build and push (root Dockerfile)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/front-architecture-web:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/front-architecture-web:sha-${{ github.sha }}
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max